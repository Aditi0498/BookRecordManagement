## Book Record Mangement System

This is a book record management API Backend application


### Routes and Endpoints

### /users
POST: Create a New User
GET: Get all lists of users


### /users/{id}
GET: Get a user by Id
PUT: Update a user by Id
DELETE: Delete a user by ID (check if he/she still have an issued book)&&(is there any fine to be collected from the student)



###/ users/subscription-details{id}
GET: Get user subscription details
1. Date of subscription
2. Valid till
3. Fine if any


###/books
GET: Get all books
POST: Create/Add a new book



###/books/{id}
GET: Get a book by id
PUT: Update a book by its id

###/books/issued
GET: Get all issued books


###/books/issued/withFine
GET:Get all issued books with Fine


### Subscription Types:
  >> Basic(3 months)
  >> Standard(6 months)
  >> Premium(12 months)




  #####Commands
   >> npm init
   >> npm i express
   >> npm i nodemon --save-dev


   ### Push to github
   git checkout -b "d"
   git add .
   git commit -m "d"
   git Push

   MERN STACK
   
   M: MongoDB
    keywords
    >>document: table base name
    >> collection: table name



    ## MongoDB
     >> npm i mongoose
     >>npm install mongodb
     >> npm i dotenv


     mongodb+srv://aditidasriya94:sfa5Xo3r89oOgE4l@cluster0.qs08smg.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0
     mongodb+srv://aditidasriya94:aditidas@cluster0.qs08smg.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0
     ## MVC Architecture

       >>M: Model (Structure of ur mongodb)
       >>V: View (ReactJs)
       >>C: Controllers  (Brain/Logic of our api application)